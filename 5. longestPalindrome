class Solution {
public:
    string longestPalindrome(string s) {
        int size = s.size();
        if(size == 1 || check(s)) return s;

        int max_len = 1;
        int begin   = 0;
        for(int i=0; i<size && (size-i)>max_len; ++i){
            for(int j=i+1; j<size; ++j){
                if((j-i+1)>=max_len && check(s.substr(i,j))){
                    max_len = j-i+1;
                    begin   = i;
                }
            }
        }

        return s.substr(begin,begin+max_len-1);
    }
    bool check(string s){
        int size = s.size();
        if(size == 1) return true;

        int begin = 0, tail = size-1;
        while(begin<tail){
            if(s[begin]!=s[tail]) return false;
            ++begin;
            --tail;
        }
        
        return true;
    }
};

class Solution {
public:
    string longestPalindrome(string s) {
        int size = s.size();
        if(size == 1 || check(s)) return s;

        string sub0 = longestPalindrome(s.substr(0,size-1));
        string sub1 = longestPalindrome(s.substr(1,size));

        return sub0.size()>=sub1.size()?sub0:sub1;
    }
    bool check(string s){
        int size = s.size();
        if(size == 1) return true;

        int begin = 0, tail = size-1;
        while(begin<tail){
            if(s[begin]!=s[tail]) return false;
            ++begin;
            --tail;
        }
        return true;
    }
};

class Solution:
    def longestPalindrome(self, s: str) -> str:
        size = len(s)
        if size == 1 or self.check(s):
            return s
        
        max_len = 1
        begin   = 0
        for i in range(size):
            if size-i <= max_len:
                break
            for j in range(i+1,size):
                if (j-i+1)>max_len and self.check(s[i:j+1]):
                    max_len = j-i+1
                    begin   = i
        return s[begin:(max_len+begin)]
        

    def check(self,s:str):
        size = len(s)
        if size<=1:
            return True

        begin = 0
        tail  = size-1
        while begin<tail:
            if s[begin] != s[tail]:
                return False
            begin += 1
            tail  -= 1
        return True
        
        
class Solution:
    def longestPalindrome(self, s: str) -> str:
        size = len(s)
        if size == 1 or self.check(s):
            return s
        
        s0 = self.longestPalindrome(s[0:(size-1)])
        s1 = self.longestPalindrome(s[1:size])

        return s0 if len(s0)>=len(s1) else s1 
        

    def check(self,s:str):
        size = len(s)
        if size<=1:
            return True

        begin = 0
        tail  = size-1
        while begin<tail:
            if s[begin] != s[tail]:
                return False
            begin += 1
            tail  -= 1
        return True
