class Solution {
public:
    string longestPalindrome(string s) {
        int size = s.size();
        if(size == 1 || check(s)) return s;

        int max_len = 1;
        int begin   = 0;
        for(int i=0; i<size && (size-i)>max_len; ++i){
            for(int j=i+1; j<size; ++j){
                if((j-i+1)>max_len && check(s.substr(i,j-i+1))){
                    max_len = j-i+1;
                    begin   = i;
                }
            }
        }

        return s.substr(begin,max_len);
    }
    bool check(string s){
        int size = s.size();
        if(size == 1) return true;

        int begin = 0, tail = size-1;
        while(begin<tail){
            if(s[begin]!=s[tail]) return false;
            ++begin;
            --tail;
        }
        
        return true;
    }
};

class Solution {
public:
    string longestPalindrome(string s) {
        int size = s.size();
        if(size == 1 || check(s)) return s;

        string sub0 = longestPalindrome(s.substr(0,size-1));
        string sub1 = longestPalindrome(s.substr(1,size-1));

        return sub0.size()>=sub1.size()?sub0:sub1;
    }
    bool check(string s){
        int size = s.size();
        if(size == 1) return true;

        int begin = 0, tail = size-1;
        while(begin<tail){
            if(s[begin]!=s[tail]) return false;
            ++begin;
            --tail;
        }
        return true;
    }
};

class Solution:
    def longestPalindrome(self, s: str) -> str:
        size = len(s)
        if size == 1 or self.check(s):
            return s
        
        max_len = 1
        begin   = 0
        for i in range(size):
            if size-i <= max_len:
                break
            for j in range(i+1,size):
                if (j-i+1)>max_len and self.check(s[i:j+1]):
                    max_len = j-i+1
                    begin   = i
        return s[begin:(max_len+begin)]
        

    def check(self,s:str):
        size = len(s)
        if size<=1:
            return True

        begin = 0
        tail  = size-1
        while begin<tail:
            if s[begin] != s[tail]:
                return False
            begin += 1
            tail  -= 1
        return True
        
        
class Solution:
    def longestPalindrome(self, s: str) -> str:
        size = len(s)
        if size == 1 or self.check(s):
            return s
        
        s0 = self.longestPalindrome(s[0:(size-1)])
        s1 = self.longestPalindrome(s[1:size])

        return s0 if len(s0)>=len(s1) else s1 
        

    def check(self,s:str):
        size = len(s)
        if size<=1:
            return True

        begin = 0
        tail  = size-1
        while begin<tail:
            if s[begin] != s[tail]:
                return False
            begin += 1
            tail  -= 1
        return True

class Solution {
public:
    int expand(const string& s, int left, int right) {
        while (left >= 0 && right < s.size() && s[left] == s[right]) {
            --left;
            ++right;
        }
        return (right - left - 2) / 2;
    }

    string longestPalindrome(string s) {
        int start = 0, end = -1;
        string t = "#";
        for (char c: s) {
            t += c;
            t += '#';
        }
        t += '#';
        s = t;

        vector<int> arm_len;
        int right = -1, j = -1;
        for (int i = 0; i < s.size(); ++i) {
            int cur_arm_len;
            if (right >= i) {
                int i_sym = j * 2 - i;
                int min_arm_len = min(arm_len[i_sym], right - i);
                cur_arm_len = expand(s, i - min_arm_len, i + min_arm_len);
            } else {
                cur_arm_len = expand(s, i, i);
            }
            arm_len.push_back(cur_arm_len);
            if (i + cur_arm_len > right) {
                j = i;
                right = i + cur_arm_len;
            }
            if (cur_arm_len * 2 + 1 > end - start) {
                start = i - cur_arm_len;
                end = i + cur_arm_len;
            }
        }

        string ans;
        for (int i = start; i <= end; ++i) {
            if (s[i] != '#') {
                ans += s[i];
            }
        }
        return ans;
    }
};

class Solution {
public:
    pair<int, int> expandAroundCenter(const string& s, int left, int right) {
        while (left >= 0 && right < s.size() && s[left] == s[right]) {
            --left;
            ++right;
        }
        return {left + 1, right - 1};
    }

    string longestPalindrome(string s) {
        int start = 0, end = 0;
        for (int i = 0; i < s.size(); ++i) {
            auto [left1, right1] = expandAroundCenter(s, i, i);
            auto [left2, right2] = expandAroundCenter(s, i, i + 1);
            if (right1 - left1 > end - start) {
                start = left1;
                end = right1;
            }
            if (right2 - left2 > end - start) {
                start = left2;
                end = right2;
            }
        }
        return s.substr(start, end - start + 1);
    }
};
