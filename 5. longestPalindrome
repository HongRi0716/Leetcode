class Solution {
public:
    string longestPalindrome(string s) {
        int size = s.size();
        if(size == 1 || check(s)) return s;

        int max_len = 1;
        int begin   = 0;
        for(int i=0; i<size && (size-i)>max_len; ++i){
            for(int j=i+1; j<size; ++j){
                if((j-i+1)>=max_len && check(s.substr(i,j))){
                    max_len = j-i+1;
                    begin   = i;
                }
            }
        }

        return s.substr(begin,begin+max_len-1);
    }
    bool check(string s){
        int size = s.size();
        if(size == 1) return true;

        int begin = 0, tail = size-1;
        while(begin<tail){
            if(s[begin]!=s[tail]) return false;
            ++begin;
            --tail;
        }
        
        return true;
    }
};

class Solution {
public:
    string longestPalindrome(string s) {
        int size = s.size();
        if(size == 1 || check(s)) return s;

        string sub0 = longestPalindrome(s.substr(0,size-1));
        string sub1 = longestPalindrome(s.substr(1,size));

        return sub0.size()>=sub1.size()?sub0:sub1;
    }
    bool check(string s){
        int size = s.size();
        if(size == 1) return true;

        int begin = 0, tail = size-1;
        while(begin<tail){
            if(s[begin]!=s[tail]) return false;
            ++begin;
            --tail;
        }
        return true;
    }
};
